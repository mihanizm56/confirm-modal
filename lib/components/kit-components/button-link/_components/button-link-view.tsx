import React, {
  ComponentType,
  FunctionComponent,
  memo,
  MouseEvent,
  useMemo,
} from 'react';
import classNames from 'classnames/bind';
import { ButtonSize, ButtonVariant } from '@/_types';
import { Text } from '../../text';
import { BUTTON_VARIANTS } from '../_constants';
import { TagOptionalPropsType } from '../_types';
import styles from '../index.module.scss';
import { FontSizeType } from '../../text/_types';
import { ButtonLoader } from './button-loader';

const cn = classNames.bind(styles);
const CLASS_NAME = 'Button-link';

type ButtonLinkViewPropsType = {
  fullWidth?: boolean;
  isBreadcrumbs?: boolean;
  isDarkTheme?: boolean;
  isLoading: boolean;
  isPopUp?: boolean;
  isTextCenter?: boolean;
  isUpperCase?: boolean;
  leftIcon?: ComponentType | FunctionComponent;
  onClick: (event: MouseEvent<HTMLButtonElement | HTMLAnchorElement>) => void;
  rightIcon?: ComponentType | FunctionComponent;
  routeName?: string;
  size: ButtonSize;
  tagName: string;
  tagOptionalProps: TagOptionalPropsType;
  text?: string;
  textSize: FontSizeType;
  variant: ButtonVariant;
  withLoader?: boolean;
  playerAnotherColor?: string;
};

export const ButtonLinkView = memo(
  ({
    fullWidth,
    isBreadcrumbs,
    isDarkTheme,
    isLoading,
    isPopUp,
    isTextCenter,
    isUpperCase,
    leftIcon: LeftIcon,
    onClick,
    rightIcon: RightIcon,
    routeName,
    size,
    tagName: Tag,
    tagOptionalProps,
    text,
    textSize,
    variant,
  }: ButtonLinkViewPropsType) => {
    const isLink = useMemo(() => variant === BUTTON_VARIANTS.link, [variant]);
    const isOnlyIcon = useMemo(() => variant === BUTTON_VARIANTS.onlyIcon, [
      variant,
    ]);
    const isIconWithTextBig = useMemo(
      () => text && size === 'big' && (LeftIcon || RightIcon),
      [text, size, LeftIcon, RightIcon],
    );
    const isIconWithTextSmall = useMemo(
      () => text && size === 'small' && (LeftIcon || RightIcon),
      [text, size, LeftIcon, RightIcon],
    );
    const isTextComponent = useMemo(
      () => text && !isOnlyIcon && variant === 'link',
      [text, isOnlyIcon, variant],
    );
    const isOrdinaryText = useMemo(() => text && !isOnlyIcon, [
      text,
      isOnlyIcon,
    ]);

    return (
      // eslint-disable-next-line
      // @ts-ignore due to a different set of props the type can't be defined properly
      <Tag
        className={cn(`${CLASS_NAME}`, {
          [`${CLASS_NAME}--full-width`]: fullWidth,
          [`${CLASS_NAME}--text-center`]: isTextCenter,
          [`${CLASS_NAME}--link-breadcrumbs`]: isLink && isBreadcrumbs,
          [`${CLASS_NAME}--link-pop-up`]: isLink && isPopUp,
          [`${CLASS_NAME}--link-pop-up-dark`]: isLink && isPopUp && isDarkTheme,
          [`${CLASS_NAME}--button`]: !isLink,
          [`${CLASS_NAME}--${variant}`]: Boolean(variant),
          [`${CLASS_NAME}--only-icon-small`]:
            variant === 'only-icon' && size === 'small',
          [`${CLASS_NAME}--${variant}-dark`]: Boolean(variant) && isDarkTheme,
          [`${CLASS_NAME}--button-${size}`]: !isLink && Boolean(size),
          [`${CLASS_NAME}--no-text-small`]: !Boolean(text) && size === 'small',
          [`${CLASS_NAME}--no-text-big`]: !Boolean(text) && size === 'big',
          [`${CLASS_NAME}--icon-text-big`]: isIconWithTextBig,
          [`${CLASS_NAME}--icon-text-small`]: isIconWithTextSmall,
        })}
        onClick={onClick}
        // eslint-disable-next-line
        {...tagOptionalProps} // not a good practice!!!
        // in this case props are generated by util and have a different field set
        // it is impossible to transmit it in any other way
      >
        {LeftIcon && (
          <span
            className={cn(`${CLASS_NAME}__icon`, {
              [`${CLASS_NAME}__icon--left-${size}`]: Boolean(size),
              [`${CLASS_NAME}__icon--no-text`]: !Boolean(text) || isOnlyIcon,
              [`${CLASS_NAME}__icon--have-right-icon`]:
                !Boolean(text) && Boolean(RightIcon),
            })}
          >
            <LeftIcon />
          </span>
        )}
        {isTextComponent ? (
          <Text
            color="inherit"
            isUpperCase={isUpperCase}
            size={textSize}
            text={text || ''}
          />
        ) : (
          isOrdinaryText && (
            <span
              className={cn(`${CLASS_NAME}__text`, {
                [`${CLASS_NAME}__text--uppercase`]: isUpperCase,
              })}
            >
              {text}
            </span>
          )
        )}

        {RightIcon && (
          <span
            className={cn(`${CLASS_NAME}__icon`, {
              [`${CLASS_NAME}__icon--right-${size}`]: Boolean(size),
              [`${CLASS_NAME}__icon--no-text`]: !Boolean(text),
              [`${CLASS_NAME}__icon--have-left-icon`]:
                !Boolean(text) && Boolean(LeftIcon),
            })}
          >
            <RightIcon />
          </span>
        )}
        {!Boolean(routeName) && !isLink && (
          <ButtonLoader
            isDarkTheme={isDarkTheme}
            isLoading={isLoading}
            variant={variant}
          />
        )}
      </Tag>
    );
  },
);
